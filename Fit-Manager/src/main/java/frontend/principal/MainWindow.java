package frontend.principal;

import backend.util.ColorApp;
import com.formdev.flatlaf.FlatClientProperties;
import frontend.admin.GeneratedReportPanel;
import frontend.admin.NewEmployeePanel;
import frontend.inventorymanager.SendEquipmentPanel;
import frontend.inventorymanager.RegisterEquipmentPanel;
import frontend.inventorymanager.ReportEquipmentPanel;
import frontend.inventorymanager.RequestEquipmentPanel;
import frontend.receptionist.ClientHistoryPanel;
import frontend.receptionist.ClientListPanel;
import frontend.receptionist.NewClientPanel;
import frontend.trainer.AssingClientPanel;
import frontend.trainer.RoutineAttendancePanel;
import java.awt.BorderLayout;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author michael
 */
public class MainWindow extends javax.swing.JFrame {

    public static final String TITTLE = "Fit - Manager";
    private final PanelBackground panelBackground = new PanelBackground();
    private final LoginPanel loginPanel = new LoginPanel();
    private final GeneratedReportPanel generatedReportPanel = new GeneratedReportPanel();
    private final SendEquipmentPanel sendEquipmentPanel = new SendEquipmentPanel();
    private final NewClientPanel receptionistPanel = new NewClientPanel();
    private final AssingClientPanel assingClientPanel = new AssingClientPanel();

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        this.setContentPane(panelBackground);
        initComponents();
        this.styleMenuBarFlatLaf();
        this.paintPanel(loginPanel);
        this.setIconImage(getIconImage());
        this.setTitle(TITTLE);
        this.menuBar.setVisible(false);
        this.viewMenuBar();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        menuBar = new javax.swing.JPanel();
        logoutBtn = new javax.swing.JButton();
        newClientBtn = new javax.swing.JButton();
        viewClientsBtn = new javax.swing.JButton();
        clientsHistoryBtn = new javax.swing.JButton();
        membershipsBtn = new javax.swing.JButton();
        registerEquipment = new javax.swing.JButton();
        requestEquipmentBtn = new javax.swing.JButton();
        sendEquipmentBtn = new javax.swing.JButton();
        reportEquipmentBtn = new javax.swing.JButton();
        assingClient = new javax.swing.JButton();
        routinesAttendanceBtn = new javax.swing.JButton();
        reportsBtn = new javax.swing.JButton();
        newEmployeeBtn = new javax.swing.JButton();
        contentPane = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(800, 650));

        menuBar.setLayout(new java.awt.GridBagLayout());

        logoutBtn.setText("Cerrar Sesión");
        logoutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 12;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 8, 20, 8);
        menuBar.add(logoutBtn, gridBagConstraints);

        newClientBtn.setText("Registrar Cliente");
        newClientBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newClientBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 8, 20, 8);
        menuBar.add(newClientBtn, gridBagConstraints);

        viewClientsBtn.setText("Ver Clientes");
        viewClientsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewClientsBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 8, 20, 8);
        menuBar.add(viewClientsBtn, gridBagConstraints);

        clientsHistoryBtn.setText("Historial de Clientes");
        clientsHistoryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clientsHistoryBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 8, 20, 8);
        menuBar.add(clientsHistoryBtn, gridBagConstraints);

        membershipsBtn.setText("Membresías y pagos");
        membershipsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                membershipsBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 8, 20, 8);
        menuBar.add(membershipsBtn, gridBagConstraints);

        registerEquipment.setText("Registrar Equipo");
        registerEquipment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerEquipmentActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 8, 20, 8);
        menuBar.add(registerEquipment, gridBagConstraints);

        requestEquipmentBtn.setText("Solicitar Equipo");
        requestEquipmentBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestEquipmentBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 8, 20, 8);
        menuBar.add(requestEquipmentBtn, gridBagConstraints);

        sendEquipmentBtn.setText("Envíar Equipo");
        sendEquipmentBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendEquipmentBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 8, 20, 8);
        menuBar.add(sendEquipmentBtn, gridBagConstraints);

        reportEquipmentBtn.setText("Reportar Equipo");
        reportEquipmentBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportEquipmentBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 8, 20, 8);
        menuBar.add(reportEquipmentBtn, gridBagConstraints);

        assingClient.setText("Asignar Cliente");
        assingClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assingClientActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 8, 20, 8);
        menuBar.add(assingClient, gridBagConstraints);

        routinesAttendanceBtn.setText("Rutinas y Asistencias");
        routinesAttendanceBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                routinesAttendanceBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 8, 20, 8);
        menuBar.add(routinesAttendanceBtn, gridBagConstraints);

        reportsBtn.setText("Reportes");
        reportsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportsBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 10;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 8, 20, 8);
        menuBar.add(reportsBtn, gridBagConstraints);

        newEmployeeBtn.setText("Nuevo Empleado");
        newEmployeeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newEmployeeBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 11;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 8, 20, 8);
        menuBar.add(newEmployeeBtn, gridBagConstraints);

        contentPane.setMinimumSize(new java.awt.Dimension(600, 800));
        contentPane.setOpaque(false);
        contentPane.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(menuBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(contentPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(menuBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(contentPane, javax.swing.GroupLayout.PREFERRED_SIZE, 325, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void logoutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutBtnActionPerformed
        int logout = JOptionPane.showConfirmDialog(this, "¿Seguro que desea cerrar sesión?", "¿Cerrar Sesión?", JOptionPane.YES_NO_OPTION);
        if (logout == 0) {
            this.setSize(800, 650);
            this.menuBar.setVisible(false);
            loginPanel.setValidLogin(false);
            paintPanel(loginPanel);
        }
    }//GEN-LAST:event_logoutBtnActionPerformed

    private void newClientBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newClientBtnActionPerformed
        NewClientPanel clientPanel = new NewClientPanel();
        paintPanel(clientPanel);
    }//GEN-LAST:event_newClientBtnActionPerformed

    private void viewClientsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewClientsBtnActionPerformed
        ClientListPanel clientListPanel = new ClientListPanel();
        paintPanel(clientListPanel);
    }//GEN-LAST:event_viewClientsBtnActionPerformed

    private void clientsHistoryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clientsHistoryBtnActionPerformed
        ClientHistoryPanel historyPanel = new ClientHistoryPanel();
        paintPanel(historyPanel);
    }//GEN-LAST:event_clientsHistoryBtnActionPerformed

    private void membershipsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_membershipsBtnActionPerformed
        ClientHistoryPanel historyPanel = new ClientHistoryPanel();
        paintPanel(historyPanel);
    }//GEN-LAST:event_membershipsBtnActionPerformed

    private void registerEquipmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerEquipmentActionPerformed
        RegisterEquipmentPanel registerEquipmentPanel = new RegisterEquipmentPanel();
        paintPanel(registerEquipmentPanel);
    }//GEN-LAST:event_registerEquipmentActionPerformed

    private void requestEquipmentBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestEquipmentBtnActionPerformed
        RequestEquipmentPanel equipmentPanel = new RequestEquipmentPanel();
        paintPanel(equipmentPanel);
    }//GEN-LAST:event_requestEquipmentBtnActionPerformed

    private void sendEquipmentBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendEquipmentBtnActionPerformed
        paintPanel(sendEquipmentPanel);
    }//GEN-LAST:event_sendEquipmentBtnActionPerformed

    private void reportEquipmentBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportEquipmentBtnActionPerformed
        ReportEquipmentPanel equipmentPanel = new ReportEquipmentPanel();
        paintPanel(equipmentPanel);
    }//GEN-LAST:event_reportEquipmentBtnActionPerformed

    private void assingClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assingClientActionPerformed
        paintPanel(assingClientPanel);
    }//GEN-LAST:event_assingClientActionPerformed

    private void routinesAttendanceBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_routinesAttendanceBtnActionPerformed
        RoutineAttendancePanel attendancePanel = new RoutineAttendancePanel();
        paintPanel(attendancePanel);
    }//GEN-LAST:event_routinesAttendanceBtnActionPerformed

    private void reportsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportsBtnActionPerformed
        paintPanel(generatedReportPanel);
    }//GEN-LAST:event_reportsBtnActionPerformed

    private void newEmployeeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newEmployeeBtnActionPerformed
        NewEmployeePanel employeePanel = new NewEmployeePanel();
        paintPanel(employeePanel);
    }//GEN-LAST:event_newEmployeeBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assingClient;
    private javax.swing.JButton clientsHistoryBtn;
    private javax.swing.JPanel contentPane;
    private javax.swing.JButton logoutBtn;
    private javax.swing.JButton membershipsBtn;
    private javax.swing.JPanel menuBar;
    private javax.swing.JButton newClientBtn;
    private javax.swing.JButton newEmployeeBtn;
    private javax.swing.JButton registerEquipment;
    private javax.swing.JButton reportEquipmentBtn;
    private javax.swing.JButton reportsBtn;
    private javax.swing.JButton requestEquipmentBtn;
    private javax.swing.JButton routinesAttendanceBtn;
    private javax.swing.JButton sendEquipmentBtn;
    private javax.swing.JButton viewClientsBtn;
    // End of variables declaration//GEN-END:variables

    private void paintPanel(JPanel panel) {
        panel.setOpaque(false);
        contentPane.removeAll();
        contentPane.setLayout(new BorderLayout());
        contentPane.add(panel);
        contentPane.repaint();
        contentPane.revalidate();
    }

    private void viewMenuBar() {
        loginPanel.addPropertyChangeListener("validLogin", evt -> {
            boolean status = (boolean) evt.getNewValue();
            menuBar.setVisible(status);

            if (status) {
                int width = (int) Toolkit.getDefaultToolkit().getScreenSize().getWidth();
                int height = (int) Toolkit.getDefaultToolkit().getScreenSize().getHeight();
                this.setSize(width, height);
                if (loginPanel.getRol().equalsIgnoreCase("Administrador")) {
                    this.actionsAdmin();
                    paintPanel(generatedReportPanel);
                } else if (loginPanel.getRol().equalsIgnoreCase("Inventario")) {
                    this.actionsInventory();
                    paintPanel(sendEquipmentPanel);
                } else if (loginPanel.getRol().equalsIgnoreCase("Entrenador")) {
                    this.actionsTrainer();
                    paintPanel(assingClientPanel);
                } else if (loginPanel.getRol().equalsIgnoreCase("Recepcionista")) {
                    this.actionsReceptionist();
                    paintPanel(receptionistPanel);
                }
            }
        });
    }

    private void actionsAdmin() {
        // Acciones del Recepcionista
        this.newClientBtn.setVisible(false);
        this.viewClientsBtn.setVisible(false);
        this.clientsHistoryBtn.setVisible(false);
        this.membershipsBtn.setVisible(false);
        // Acciones de inventario
        this.registerEquipment.setVisible(false);
        this.requestEquipmentBtn.setVisible(false);
        this.sendEquipmentBtn.setVisible(false);
        this.reportEquipmentBtn.setVisible(false);
        // Acciones del entrenador
        this.assingClient.setVisible(false);
        this.routinesAttendanceBtn.setVisible(false);
        //Acciones del administrador
        this.reportsBtn.setVisible(true);
        this.newEmployeeBtn.setVisible(true);
    }

    private void actionsInventory() {
        // Acciones del Recepcionista
        this.newClientBtn.setVisible(false);
        this.viewClientsBtn.setVisible(false);
        this.clientsHistoryBtn.setVisible(false);
        this.membershipsBtn.setVisible(false);
        // Acciones de inventario
        this.registerEquipment.setVisible(true);
        this.requestEquipmentBtn.setVisible(true);
        this.sendEquipmentBtn.setVisible(true);
        this.reportEquipmentBtn.setVisible(true);
        // Acciones del entrenador
        this.assingClient.setVisible(false);
        this.routinesAttendanceBtn.setVisible(false);
        //Acciones del administrador
        this.reportsBtn.setVisible(false);
        this.newEmployeeBtn.setVisible(false);
    }

    private void actionsTrainer() {
        // Acciones del Recepcionista
        this.newClientBtn.setVisible(false);
        this.viewClientsBtn.setVisible(false);
        this.clientsHistoryBtn.setVisible(false);
        this.membershipsBtn.setVisible(false);
        // Acciones de inventario
        this.registerEquipment.setVisible(false);
        this.requestEquipmentBtn.setVisible(false);
        this.sendEquipmentBtn.setVisible(false);
        this.reportEquipmentBtn.setVisible(false);
        // Acciones del entrenador
        this.assingClient.setVisible(true);
        this.routinesAttendanceBtn.setVisible(true);
        //Acciones del administrador
        this.reportsBtn.setVisible(false);
        this.newEmployeeBtn.setVisible(false);
    }

    private void actionsReceptionist() {
        // Acciones del Recepcionista
        this.newClientBtn.setVisible(true);
        this.viewClientsBtn.setVisible(true);
        this.clientsHistoryBtn.setVisible(true);
        this.membershipsBtn.setVisible(true);
        // Acciones de inventario
        this.registerEquipment.setVisible(false);
        this.requestEquipmentBtn.setVisible(false);
        this.sendEquipmentBtn.setVisible(false);
        this.reportEquipmentBtn.setVisible(false);
        // Acciones del entrenador
        this.assingClient.setVisible(false);
        this.routinesAttendanceBtn.setVisible(false);
        //Acciones del administrador
        this.reportsBtn.setVisible(false);
        this.newEmployeeBtn.setVisible(false);
    }

    private void styleMenuBarFlatLaf() {
        // Fondo del menú
        menuBar.putClientProperty(FlatClientProperties.STYLE, "background: " + ColorApp.GREEN + ";");

        // Estilo común para todos los botones del menú
        JButton[] buttons = {
            newClientBtn, viewClientsBtn, clientsHistoryBtn, membershipsBtn,
            registerEquipment, requestEquipmentBtn, sendEquipmentBtn, reportEquipmentBtn,
            assingClient, routinesAttendanceBtn, reportsBtn, newEmployeeBtn, logoutBtn
        };

        for (JButton button : buttons) {
            button.putClientProperty(FlatClientProperties.BUTTON_TYPE, "roundRect");
            button.putClientProperty(FlatClientProperties.STYLE, ""
                    + "arc: 20;"
                    + "font: bold +14;"
                    + "background: " + ColorApp.GREEN + ";"
                    + "foreground: " + ColorApp.WHITE + ";"
                    + "hoverBackground: " + ColorApp.GREEN_DARK + ";"
                    + "pressedBackground: " + ColorApp.GREEN_DARKED + ";"
            );
        }
    }

    class PanelBackground extends JPanel {

        private Image image;

        @Override
        public void paint(Graphics g) {
            image = new ImageIcon(getClass().getResource("/images/BigSportgym.jpg")).getImage();
            g.drawImage(image, 0, 0, getWidth(), getHeight(), this);
            setOpaque(false);
            super.paint(g);
        }
    }

    @Override
    public Image getIconImage() {
        Image retValue = Toolkit.getDefaultToolkit().getImage(getClass().getResource("/images/IconGym.png"));
        return retValue;
    }
}
