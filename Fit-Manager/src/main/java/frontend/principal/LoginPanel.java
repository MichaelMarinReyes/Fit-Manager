package frontend.principal;

import backend.services.LoginService;
import backend.util.ColorApp;
import com.formdev.flatlaf.FlatClientProperties;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 *
 * @author michael
 */
public class LoginPanel extends javax.swing.JPanel {

    private boolean validLogin = false;
    private LoginService loginService = new LoginService();

    /**
     * Creates new form LoginPanel
     */
    public LoginPanel() {
        initComponents();
        styleComponents();
        this.validLogin = false;
        this.fillRolComboBox();
    }

    /**
     * Sirve para validar que las credenciales ingresadas son válidas.
     *
     * @return true o false si las credenciales ingresadas fueron correctas o
     * incorrectas.
     */
    public boolean isValidLogin() {
        return validLogin;
    }

    /**
     * Sirve para obtener el texto del index seleccionado en el JComboBox.
     *
     * @return el texto del index seleccionado.
     */
    public String getRol() {
        return rolUserCombobox.getSelectedItem().toString();
    }

    /**
     * Cambia el atributo de true a false o viceversa según las credenciales
     * ingresadas.
     *
     * @param validLogin es un parámetro de tipo boolean que representa si las
     * credenciales ingresadas y el rol seleccionado es correcto o incorrecto.
     */
    public void setValidLogin(boolean validLogin) {
        boolean old = this.validLogin;
        this.validLogin = validLogin;
        firePropertyChange("validLogin", old, validLogin);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        userIdTextField = new javax.swing.JTextField();
        passwordField = new javax.swing.JPasswordField();
        loginBtn = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        rolUserCombobox = new javax.swing.JComboBox<>();

        setOpaque(false);
        setLayout(new java.awt.GridBagLayout());

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Hack NFM", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 153, 0));
        jLabel1.setText("Inicio de Sesión");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 200, 0, 234);
        add(jLabel1, gridBagConstraints);

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Hack NFM", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 153, 0));
        jLabel2.setText("Usuario:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 39;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(49, 171, 0, 0);
        add(jLabel2, gridBagConstraints);

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Hack NFM", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 153, 0));
        jLabel3.setText("Contraseña:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipadx = 37;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(38, 139, 0, 0);
        add(jLabel3, gridBagConstraints);

        userIdTextField.setMaximumSize(new java.awt.Dimension(200, 2147483647));
        userIdTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                userIdTextFieldKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 220;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(41, 19, 0, 0);
        add(userIdTextField, gridBagConstraints);

        passwordField.setMaximumSize(new java.awt.Dimension(200, 2147483647));
        passwordField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                passwordFieldKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipadx = 200;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(38, 19, 0, 0);
        add(passwordField, gridBagConstraints);

        loginBtn.setFont(new java.awt.Font("Hack Nerd Font Mono", 0, 24)); // NOI18N
        loginBtn.setForeground(new java.awt.Color(0, 255, 51));
        loginBtn.setText("Ingresar");
        loginBtn.setBorder(null);
        loginBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(61, 350, 122, 0);
        add(loginBtn, gridBagConstraints);

        jLabel4.setFont(new java.awt.Font("Hack NFM", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 153, 0));
        jLabel4.setText("Tipo de empleado:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(39, 78, 0, 0);
        add(jLabel4, gridBagConstraints);

        rolUserCombobox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                rolUserComboboxKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(34, 20, 0, 0);
        add(rolUserCombobox, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Sirve para capturar los valores d elos campos de userIdTextField,
     * passwordField y rolUserCombobox, valida que las credenciales correspondan
     * con los datos de la base de datos.
     *
     * @param evt sirve para darle un evento al botón.
     */
    private void loginBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginBtnActionPerformed
        String username = userIdTextField.getText();
        char[] pass = passwordField.getPassword();
        String password = new String(pass);
        String rol = rolUserCombobox.getSelectedItem().toString();

        if (username.isEmpty() || password.isBlank()) {
            JOptionPane.showMessageDialog(this, "Hay campos vacíos, llénelos por favor", "Campos necesarios", JOptionPane.INFORMATION_MESSAGE);
            loginBtn.setForeground(Color.red);
            setValidLogin(false);
            userIdTextField.requestFocus();
            return;
        }

        if (rolUserCombobox.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(this, "Debe escoger el tipo de empleado", "Tipo de empleado", JOptionPane.INFORMATION_MESSAGE);
            rolUserCombobox.requestFocus();
            return;
        }

        if (loginService.login(username, password, rol)) {
            setValidLogin(true);
            validLogin = true;
        } else {
            setValidLogin(false);
            JOptionPane.showMessageDialog(this, "Credenciales inválidas", "Error", JOptionPane.ERROR_MESSAGE);
            userIdTextField.requestFocus();
        }

        userIdTextField.setText("");
        passwordField.setText("");
        rolUserCombobox.setSelectedIndex(0);
    }//GEN-LAST:event_loginBtnActionPerformed

    /**
     * Modifica el focus al presionar Enter y manda el focus al campo del
     * passwordField
     *
     * @param evt captura el evento, en este caso al presionar la tecla Enter.
     */
    private void userIdTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_userIdTextFieldKeyPressed
        if (evt.getExtendedKeyCode() == KeyEvent.VK_ENTER) {
            passwordField.requestFocus();
        }
    }//GEN-LAST:event_userIdTextFieldKeyPressed

    /**
     * Cambia el focus al presionar Enter y manda el focus al campo del
     * rolUserCombobox.
     *
     * @param evt captura el evento, en este caso al presionar la tecla Enter.
     */
    private void passwordFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_passwordFieldKeyPressed
        if (evt.getExtendedKeyCode() == KeyEvent.VK_ENTER) {
            rolUserCombobox.requestFocus();
        }
    }//GEN-LAST:event_passwordFieldKeyPressed

    /**
     * Modifica el focus al presioanr Enter y manda el focus al botón de
     * loginBtn.
     *
     * @param evt captura el evento, en este caso al presionar la tecla Enter.
     */
    private void rolUserComboboxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rolUserComboboxKeyPressed
        if (evt.getExtendedKeyCode() == KeyEvent.VK_ENTER) {
            loginBtn.requestFocus();
            loginBtn.doClick();
        }
    }//GEN-LAST:event_rolUserComboboxKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JButton loginBtn;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JComboBox<String> rolUserCombobox;
    private javax.swing.JTextField userIdTextField;
    // End of variables declaration//GEN-END:variables

    /**
     * Sirve para llenar el JComboBox con los roles existentes en el sistema.
     * Estos roles representan los tipos de empleados.
     */
    private void fillRolComboBox() {
        rolUserCombobox.removeAllItems();
        ArrayList<String> roles = loginService.getRoles();

        rolUserCombobox.addItem("Tipo de empleado");

        if (!roles.isEmpty()) {
            for (String rol : roles) {
                rolUserCombobox.addItem(rol);
            }
        }
    }

    /**
     * Sirve para dar formato de colores y diseño a los componentes del
     * formulario.
     */
    private void styleComponents() {
        userIdTextField.putClientProperty(FlatClientProperties.PLACEHOLDER_TEXT, "Usuario");
        userIdTextField.putClientProperty(FlatClientProperties.STYLE, ""
                + "arc: 15;"
                + "focusWidth: 2;"
                + "focusColor: " + ColorApp.GREEN + ";"
                + "margin: 5,10,5,10;"
                + "font: 14;"
        );

        passwordField.putClientProperty(FlatClientProperties.PLACEHOLDER_TEXT, "Contraseña");
        passwordField.putClientProperty(FlatClientProperties.STYLE, ""
                + "arc: 15;"
                + "focusWidth: 2;"
                + "focusColor: " + ColorApp.GREEN + ";"
                + "showRevealButton: true;"
                + "margin: 5,10,5,10;"
                + "font: 14;"
        );

        rolUserCombobox.putClientProperty(FlatClientProperties.STYLE, ""
                + "arc: 15;"
                + "focusWidth: 2;"
                + "focusColor: " + ColorApp.GREEN + ";"
                + "padding: 5,10,5,10;"
                + "font: 14;"
        );

        loginBtn.putClientProperty(FlatClientProperties.BUTTON_TYPE, "roundRect");
        loginBtn.putClientProperty(FlatClientProperties.STYLE, ""
                + "font: bold +16;"
                + "arc: 20;"
                + "focusWidth: 2;"
                + "background: " + ColorApp.GREEN + ";"
                + "foreground: " + ColorApp.WHITE + ";"
                + "hoverBackground: " + ColorApp.GREEN_DARK + ";"
                + "pressedBackground: " + ColorApp.GREEN_DARKED + ";"
        );
    }
}
