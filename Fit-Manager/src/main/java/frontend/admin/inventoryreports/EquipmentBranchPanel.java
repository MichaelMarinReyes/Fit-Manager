package frontend.admin.inventoryreports;

import backend.models.gym.Branch;
import backend.models.gym.Equipment;
import backend.services.BranchService;
import backend.services.EquipmentService;
import backend.util.ColorApp;
import java.awt.Color;
import java.awt.Dimension;
import java.util.ArrayList;
import javax.swing.JComboBox;
import javax.swing.ListSelectionModel;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableModel;

/**
 *
 * @author michael
 */
public class EquipmentBranchPanel extends javax.swing.JPanel {

    private final EquipmentService equipmentService = new EquipmentService();
    private final BranchService branchesService = new BranchService();

    /**
     * Creates new form EquipmentBranchPanel
     */
    public EquipmentBranchPanel() {
        initComponents();
        this.styleTable();
        this.fillGymBranch();
        this.fillTable();
        gymBranchCombobox.addActionListener(e -> this.filterTableByBranch());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        clientsTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        gymBranchCombobox = new javax.swing.JComboBox<>();

        setLayout(new java.awt.GridBagLayout());

        clientsTable = new javax.swing.JTable(){
            public boolean isCellEditable(int row, int col) {
                return false;
            }
        };
        clientsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "NO.", "UUID", "Nombre", "Estado", "Ubicación", "Descripción"
            }
        ));
        jScrollPane1.setViewportView(clientsTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 889;
        gridBagConstraints.ipady = 345;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(7, 6, 6, 6);
        add(jScrollPane1, gridBagConstraints);

        jLabel1.setText("Filtrar por:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 250, 0, 0);
        add(jLabel1, gridBagConstraints);

        gymBranchCombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 83;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 0);
        add(gymBranchCombobox, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable clientsTable;
    private javax.swing.JComboBox<String> gymBranchCombobox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    /**
     * Da formato a la tabla de listado de clientes.
     */
    private void styleTable() {
        jLabel1.putClientProperty("FlatLaf.style", "font: bold +14; foreground: " + ColorApp.GREEN + ";");

        gymBranchCombobox.putClientProperty("FlatLaf.style",
                "arc: 15;"
                + "font: 14;"
                + "foreground: " + ColorApp.GREEN_DARK + ";");
        gymBranchCombobox.setPreferredSize(new Dimension(150, 30));

        clientsTable.setRowHeight(30);
        clientsTable.setGridColor(Color.GREEN);
        clientsTable.setShowGrid(true);
        clientsTable.setFillsViewportHeight(true);
        clientsTable.setAutoCreateRowSorter(true);
        clientsTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);
        for (int i = 0; i < clientsTable.getColumnCount(); i++) {
            clientsTable.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
        }

        clientsTable.getTableHeader().setDefaultRenderer(new DefaultTableCellRenderer() {
            @Override
            public java.awt.Component getTableCellRendererComponent(javax.swing.JTable table, Object value,
                    boolean isSelected, boolean hasFocus, int row, int column) {
                super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                setHorizontalAlignment(SwingConstants.CENTER);
                setBackground(Color.decode(ColorApp.GREEN.toString()));
                setForeground(Color.WHITE);
                setFont(getFont().deriveFont(java.awt.Font.BOLD, 14f));
                return this;
            }
        });

        for (int column = 0; column < clientsTable.getColumnCount(); column++) {
            int maxWidth;
            if (column == 0) {
                maxWidth = 40;
            } else if (column == 7) {
                maxWidth = 120;
            } else {
                maxWidth = 70;
            }

            for (int row = 0; row < clientsTable.getRowCount(); row++) {
                TableCellRenderer renderer = clientsTable.getCellRenderer(row, column);
                java.awt.Component comp = clientsTable.prepareRenderer(renderer, row, column);
                maxWidth = Math.max(comp.getPreferredSize().width + 10, maxWidth);
            }
            clientsTable.getColumnModel().getColumn(column).setPreferredWidth(maxWidth);
        }
    }

    /**
     * Llena la tabla con los datos de la base de datos.
     */
    private void fillTable() {
        String[] columns = {"No.", "UUID", "Nombre", "Estado", "Descripción", "Ubicación"};
        ArrayList<Equipment> equipments = this.equipmentService.getEquipments();
        DefaultTableModel model = new DefaultTableModel(columns, equipments.size());
        clientsTable.setModel(model);

        TableModel dataModel = clientsTable.getModel();

        for (int i = 0; i < equipments.size(); i++) {
            Equipment equipment = equipments.get(i);
            String stateEquipment = equipment.isState() ? "Disponible" : "No disponible";

            if (equipment.isState()) {
                dataModel.setValueAt((i + 1), i, 0);
                dataModel.setValueAt(equipment.getId().toString(), i, 1);
                dataModel.setValueAt(equipment.getName(), i, 2);
                dataModel.setValueAt(stateEquipment, i, 3);
                dataModel.setValueAt(equipment.getDescription(), i, 4);
                dataModel.setValueAt(equipment.getLocation(), i, 5);
            }

        }
        this.styleTable();
    }

    /**
     * Sirve para llenar el JComboBox con las sucursales existentes.
     */
    private void fillGymBranch() {
        gymBranchCombobox.removeAllItems();
        ArrayList<Branch> branches = branchesService.getBranches();

        gymBranchCombobox.addItem("Todas las sucursales");

        if (!branches.isEmpty()) {
            for (Branch branch : branches) {
                gymBranchCombobox.addItem(branch.getName());
            }
        }
    }

    /**
     * Filtra la tabla según la sucursal seleccionada en el JComboBox.
     */
    private void filterTableByBranch() {
        String selectedBranch = (String) gymBranchCombobox.getSelectedItem();
        ArrayList<Equipment> equipments = equipmentService.getEquipments();

        if (selectedBranch != null && selectedBranch.equals("Todas las sucursales")) {
            fillTable();
            return;
        }

        ArrayList<Equipment> filtered = new ArrayList<>();
        for (Equipment eq : equipments) {
            if (eq.getLocation().equals(selectedBranch)) {
                filtered.add(eq);
            }
        }

        String[] columns = {"No.", "UUID", "Nombre", "Estado", "Descripción", "Ubicación"};
        DefaultTableModel model = new DefaultTableModel(columns, filtered.size());
        clientsTable.setModel(model);

        TableModel dataModel = clientsTable.getModel();
        for (int i = 0; i < filtered.size(); i++) {
            Equipment equipment = filtered.get(i);
            String stateEquipment = equipment.isState() ? "Disponible" : "No disponible";

            dataModel.setValueAt((i + 1), i, 0);
            dataModel.setValueAt(equipment.getId().toString(), i, 1);
            dataModel.setValueAt(equipment.getName(), i, 2);
            dataModel.setValueAt(stateEquipment, i, 3);
            dataModel.setValueAt(equipment.getDescription(), i, 4);
            dataModel.setValueAt(equipment.getLocation(), i, 5);
        }

        this.styleTable();
    }

}
