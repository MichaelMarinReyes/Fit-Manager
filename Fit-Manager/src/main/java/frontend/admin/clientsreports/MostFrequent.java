package frontend.admin.clientsreports;

import backend.models.users.Client;
import backend.services.ClientService;
import backend.util.ColorApp;
import com.formdev.flatlaf.FlatClientProperties;
import java.awt.Color;
import java.util.ArrayList;
import javax.swing.ListSelectionModel;
import javax.swing.RowFilter;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author michael
 */
public class MostFrequent extends javax.swing.JPanel {

    private ClientService clientService = new ClientService();

    /**
     * Creates new form MostFrequent
     */
    public MostFrequent() {
        initComponents();
        this.styleComponents();
        this.fillTable();
        this.findUser();
        this.findClientField.requestFocus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        clientsTable = new javax.swing.JTable();
        findClientField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        updateTableBtn = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        clientsTable = new javax.swing.JTable(){
            public boolean isCellEditable(int row, int col) {
                return false;
            }
        };
        clientsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "NO.", "UUID", "Nombre", "Teléfono", "Teléfono de emergencia", "Membresía", "Entrenador asignado", "Membresía"
            }
        ));
        jScrollPane1.setViewportView(clientsTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 889;
        gridBagConstraints.ipady = 399;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        add(jScrollPane1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 378;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(16, 36, 10, 0);
        add(findClientField, gridBagConstraints);

        jLabel1.setText("Bucar cliente:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 200, 10, 0);
        add(jLabel1, gridBagConstraints);

        updateTableBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/updateList.png"))); // NOI18N
        updateTableBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateTableBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 12;
        gridBagConstraints.ipady = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 40, 5, 10);
        add(updateTableBtn, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void updateTableBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateTableBtnActionPerformed
        this.fillTable();
        this.styleComponents();
    }//GEN-LAST:event_updateTableBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable clientsTable;
    private javax.swing.JTextField findClientField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton updateTableBtn;
    // End of variables declaration//GEN-END:variables

    /**
     * Sirve para dar estilo a los componentes.
     */
    private void styleComponents() {
        jLabel1.putClientProperty("FlatLaf.style", "font: bold +14; foreground: " + ColorApp.GREEN + ";");
        findClientField.putClientProperty("JTextField.placeholderText", "Ingrese nombre del cliente, teléfono, UUID o membresía");
        findClientField.putClientProperty("FlatLaf.style", "arc: 15; focusColor: " + ColorApp.GREEN + "; font: 14;");

        updateTableBtn.putClientProperty(FlatClientProperties.BUTTON_TYPE, "roundRect");
        updateTableBtn.putClientProperty(FlatClientProperties.STYLE,
                "arc: 15;"
                + "font: bold +12;"
                + "background: " + ColorApp.GREEN + ";"
                + "foreground: " + ColorApp.WHITE + ";"
                + "hoverBackground: " + ColorApp.GREEN_DARK + ";"
                + "pressedBackground: " + ColorApp.GREEN_DARKED + ";");
        updateTableBtn.setHorizontalTextPosition(SwingConstants.CENTER);
        updateTableBtn.setVerticalTextPosition(SwingConstants.BOTTOM);
        updateTableBtn.setToolTipText("Actualizar listado");

        clientsTable.setRowHeight(30);
        clientsTable.setGridColor(Color.GREEN);
        clientsTable.setShowGrid(true);
        clientsTable.setFillsViewportHeight(true);
        clientsTable.setAutoCreateRowSorter(true);
        clientsTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);
        for (int i = 0; i < clientsTable.getColumnCount(); i++) {
            clientsTable.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
        }

        clientsTable.getTableHeader().setDefaultRenderer(new DefaultTableCellRenderer() {
            @Override
            public java.awt.Component getTableCellRendererComponent(javax.swing.JTable table, Object value,
                    boolean isSelected, boolean hasFocus, int row, int column) {
                super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                setHorizontalAlignment(SwingConstants.CENTER);
                setBackground(Color.decode(ColorApp.GREEN.toString()));
                setForeground(Color.WHITE);
                setFont(getFont().deriveFont(java.awt.Font.BOLD, 14f));
                return this;
            }
        });

        for (int column = 0; column < clientsTable.getColumnCount(); column++) {
            int maxWidth;
            if (column == 0) {
                maxWidth = 40;
            } else if (column == 7) {
                maxWidth = 120;
            } else {
                maxWidth = 70;
            }

            for (int row = 0; row < clientsTable.getRowCount(); row++) {
                TableCellRenderer renderer = clientsTable.getCellRenderer(row, column);
                java.awt.Component comp = clientsTable.prepareRenderer(renderer, row, column);
                maxWidth = Math.max(comp.getPreferredSize().width + 10, maxWidth);
            }
            clientsTable.getColumnModel().getColumn(column).setPreferredWidth(maxWidth);
        }
    }

    /**
     * Llena la tabla con los datos de la base de datos.
     */
    private void fillTable() {
        String[] columns = {"No.", "UUID", "Nombre", "Teléfono", "Contacto de emergencia", "Entrenador", "Membresía"};
        ArrayList<Client> clients = this.clientService.getAllClients();
        DefaultTableModel model = new DefaultTableModel(columns, clients.size());
        clientsTable.setModel(model);

        TableModel dataModel = clientsTable.getModel();

        for (int i = 0; i < clients.size(); i++) {
            Client client = clients.get(i);
            dataModel.setValueAt((i + 1), i, 0);
            dataModel.setValueAt(client.getId().toString(), i, 1);
            dataModel.setValueAt(client.getUserName(), i, 2);
            dataModel.setValueAt(client.getPhoneNumber(), i, 3);
            dataModel.setValueAt(client.getContactEmergency(), i, 4);

            if (client.getAssignedTrainer().getUserName() == null) {
                dataModel.setValueAt("Sin entrenador", i, 5);
            } else {
                dataModel.setValueAt(client.getAssignedTrainer().getUserName(), i, 5);
            }

            String membership = (client.getCurrentMembership() == null) ? "Sin membresía" : client.getCurrentMembership().getMembershipType().toString();
            dataModel.setValueAt(membership, i, 6);
        }
        this.styleComponents();
    }

    /**
     * Sirve para buscar un usuario a partir de el texto ingresado en el
     * componente fieldClientField.
     */
    private void findUser() {
        DefaultTableModel model = (DefaultTableModel) clientsTable.getModel();
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
        clientsTable.setRowSorter(sorter);

        findClientField.getDocument().addDocumentListener(new javax.swing.event.DocumentListener() {
            @Override
            public void insertUpdate(javax.swing.event.DocumentEvent e) {
                filter();
            }

            @Override
            public void removeUpdate(javax.swing.event.DocumentEvent e) {
                filter();
            }

            @Override
            public void changedUpdate(javax.swing.event.DocumentEvent e) {
                filter();
            }

            private void filter() {
                String text = findClientField.getText().trim();
                if (text.length() == 0) {
                    sorter.setRowFilter(null);
                } else {
                    sorter.setRowFilter(RowFilter.regexFilter("(?i)" + text, 1, 2, 3, 4, 5, 6));
                }
            }
        });
    }
}
